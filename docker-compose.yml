version: '3'

services:
  app:
    container_name: app
    build: .
    ports:
      - "${SERVER_PORT_MAPPING}"
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    container_name: postgres
    hostname: postgres
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT_MAPPING}"
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DATABASE} -h 127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - app-network

  redis:
    container_name: redis
    hostname: redis
    image: redis:latest
    ports:
      - "${SPRING_DATA_REDIS_PORT_MAPPING}"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    container_name: nginx_logs
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "8081:80"
    volumes:
      - ./logs:/usr/share/nginx/logs
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge

